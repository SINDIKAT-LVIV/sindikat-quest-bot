// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SINDIKAT.QuestBot.Database;

#nullable disable

namespace SINDIKAT.QuestBot.Database.Migrations
{
    [DbContext(typeof(QuestContext))]
    partial class QuestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PlayerID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PlayerID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Player", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Quest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("ExpirationTime")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("HintDelayTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("QuestID");

                    b.ToTable("Quest", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.QuestHint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImageContent")
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("QuestHintID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestStepID")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("QuestHintID");

                    b.HasIndex("QuestHintID");

                    b.ToTable("QuestHint", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.QuestStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImageContent")
                        .HasColumnType("text");

                    b.Property<Guid?>("NextQuestStepID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PreviousQuestStepID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuestStepID")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("QuestStepID");

                    b.HasIndex("NextQuestStepID")
                        .IsUnique();

                    b.HasIndex("PreviousQuestStepID")
                        .IsUnique();

                    b.HasIndex("QuestID");

                    b.ToTable("QuestStep", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EntryCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("QuestID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("TeamID");

                    b.HasIndex("QuestID");

                    b.ToTable("Team", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.TeamQuestHint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestHintID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamQuestHintID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamQuestStepID")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("TeamQuestHintID");

                    b.HasIndex("QuestHintID");

                    b.HasIndex("QuestID");

                    b.HasIndex("TeamID");

                    b.HasIndex("TeamQuestHintID");

                    b.ToTable("TeamQuestHint", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.TeamQuestStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("QuestID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestStepID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamQuestStepID")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("TeamQuestStepID");

                    b.HasIndex("QuestID");

                    b.HasIndex("QuestStepID");

                    b.HasIndex("TeamID");

                    b.ToTable("TeamQuestStep", "dbo");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Player", b =>
                {
                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.QuestHint", b =>
                {
                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.QuestStep", "Step")
                        .WithMany("Hints")
                        .HasForeignKey("QuestHintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.QuestStep", b =>
                {
                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.QuestStep", "Next")
                        .WithOne()
                        .HasForeignKey("SINDIKAT.QuestBot.Database.Entities.QuestStep", "NextQuestStepID");

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.QuestStep", "Previous")
                        .WithOne()
                        .HasForeignKey("SINDIKAT.QuestBot.Database.Entities.QuestStep", "PreviousQuestStepID");

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Quest", "Quest")
                        .WithMany("Steps")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Next");

                    b.Navigation("Previous");

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Team", b =>
                {
                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Quest", "Quest")
                        .WithMany("Teams")
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.TeamQuestHint", b =>
                {
                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.QuestHint", "QuestHint")
                        .WithMany()
                        .HasForeignKey("QuestHintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.TeamQuestStep", "TeamQuestStep")
                        .WithMany("TeamQuestHints")
                        .HasForeignKey("TeamQuestHintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("QuestHint");

                    b.Navigation("Team");

                    b.Navigation("TeamQuestStep");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.TeamQuestStep", b =>
                {
                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.QuestStep", "QuestStep")
                        .WithMany()
                        .HasForeignKey("QuestStepID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SINDIKAT.QuestBot.Database.Entities.Team", "Team")
                        .WithMany("QuestSteps")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("QuestStep");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Quest", b =>
                {
                    b.Navigation("Steps");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.QuestStep", b =>
                {
                    b.Navigation("Hints");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("QuestSteps");
                });

            modelBuilder.Entity("SINDIKAT.QuestBot.Database.Entities.TeamQuestStep", b =>
                {
                    b.Navigation("TeamQuestHints");
                });
#pragma warning restore 612, 618
        }
    }
}
